<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Python抓取律师行业信用信息服务平台数据]]></title>
      <url>https://whark.cn/2018/03/27/use-python-crawl-lawyer-data/</url>
      <content type="html"><![CDATA[<p>本文以律师行业信用服务平台为例，介绍如何对页面数据进行提取，保存。</p>
<h3 id="开始：页面数据分析"><a href="#开始：页面数据分析" class="headerlink" title="开始：页面数据分析"></a>开始：页面数据分析</h3><p>打开 <a href="http://credit.gdlawyer.org.cn/front/indexFront/listDetail?type=1" target="_blank" rel="external">广东省律师行业信用信息服务平台</a> ，F12打开控制台，点击Network，刷新界面，发现了向API请求的接口，返回的资源是 <strong>Json</strong> 格式的，而且资源中的数据就是页面上的，就能确认页面中的律师信息就是通过这个接口读取的，本站点是采用前后端分离写的，如果没有类似的请求，数据是直接渲染在HTML中，说明HTML在后端已经处理好了，只能按标签，分离数据了。</p>
<p><img src="../../img/lawyer_find_api_address.jpg" alt="lawyer_find_api_address"></p>
<h3 id="尝试：API接口调用"><a href="#尝试：API接口调用" class="headerlink" title="尝试：API接口调用"></a>尝试：API接口调用</h3><p>看看API能不能正常访问，如下图：</p>
<p><img src="../../img/lawyer_api_address_try.jpg" alt="lawyer_api_address_try"></p>
<p>观察参数，发现参数就是筛选项、分页大小、偏移量、和13位的时间戳。</p>
<p><img src="../../img/lawyer_api_address_analysis.png" alt="lawyer_api_address_analysis"></p>
<p>把参数含义弄明白后，使用Python来请求API数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">result = requests.get(<span class="string">'http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage=0&amp;limit=2&amp;_=1522140226962'</span>)</div><div class="line"></div><div class="line">print(result.text)</div></pre></td></tr></table></figure>
<p>运行的结果如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">page-info</span> <span class="attr">start-row</span>=<span class="string">"1"</span> <span class="attr">is-last-page</span>=<span class="string">"false"</span> <span class="attr">has-next-page</span>=<span class="string">"true"</span> <span class="attr">first-page</span>=<span class="string">"1"</span> <span class="attr">pages</span>=<span class="string">"7816"</span> <span class="attr">has-previous-page</span>=<span class="string">"false"</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">pre-page</span>=<span class="string">"0"</span> <span class="attr">is-first-page</span>=<span class="string">"true"</span> <span class="attr">end-row</span>=<span class="string">"5"</span> <span class="attr">next-page</span>=<span class="string">"2"</span> <span class="attr">navigate-pages</span>=<span class="string">"8"</span> <span class="attr">last-page</span>=<span class="string">"8"</span> <span class="attr">page-num</span>=<span class="string">"1"</span> <span class="attr">page-size</span>=<span class="string">"5"</span> <span class="attr">total</span>=<span class="string">"39078"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rows</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:java</span>=<span class="string">"http://java.sun.com"</span> <span class="attr">empty</span>=<span class="string">"false"</span> <span class="attr">xsi:type</span>=<span class="string">"java:java.util.HashMap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rowsxmlns:xsi</span> <span class="attr">xmlns:java</span>=<span class="string">"http://java.sun.com"</span> <span class="attr">empty</span>=<span class="string">"false"</span> <span class="attr">xsi:type</span>=<span class="string">"java:java.util.HashMap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rows</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:java</span>=<span class="string">"http://java.sun.com"</span> <span class="attr">empty</span>=<span class="string">"false"</span> <span class="attr">xsi:type</span>=<span class="string">"java:java.util.HashMap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rows</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:java</span>=<span class="string">"http://java.sun.com"</span> <span class="attr">empty</span>=<span class="string">"false"</span> <span class="attr">xsi:type</span>=<span class="string">"java:java.util.HashMap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rows</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:java</span>=<span class="string">"http://java.sun.com"</span> <span class="attr">empty</span>=<span class="string">"false"</span> <span class="attr">xsi:type</span>=<span class="string">"java:java.util.HashMap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>1<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>2<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>3<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>4<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>5<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>6<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>7<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">navigatepage-nums</span>&gt;</span>8<span class="tag">&lt;/<span class="name">navigatepage-nums</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">page-info</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>发现并不是之前在浏览器中看到的JSON格式，而是xml格式的，所以可能是Header中没有指定接受json格式，所以添加一下Header：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">s = requests.Session()</div><div class="line">headers = &#123;<span class="string">'Accept'</span> : <span class="string">'application/json;charset=utf-8'</span>&#125;</div><div class="line">s.headers.update(headers)</div><div class="line"></div><div class="line">result = s.get(<span class="string">'http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage=0&amp;limit=2&amp;_=1522140226962'</span>)</div><div class="line">print(result.text)</div></pre></td></tr></table></figure>
<p>加了一个Accept的Header就好了，返回结果如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"pageSize"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"size"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"orderBy"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"startRow"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"endRow"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"total"</span>: <span class="number">39078</span>,</div><div class="line">    <span class="attr">"pages"</span>: <span class="number">19539</span>,</div><div class="line">    <span class="attr">"rows"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"QUALIFICATIONDATE"</span>: <span class="string">"1991-07-01"</span>,</div><div class="line">            <span class="attr">"SXXX"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"ISLEADER"</span>: <span class="string">"1"</span>,</div><div class="line">            <span class="attr">"SEX"</span>: <span class="string">"1"</span>,</div><div class="line">            <span class="attr">"LAWYER_NAME"</span>: <span class="string">"丁一元"</span>,</div><div class="line">            <span class="attr">"FIRSTTIME"</span>: <span class="string">"1997-11-02"</span>,</div><div class="line">            <span class="attr">"EDUCATION"</span>: <span class="string">"31"</span>,</div><div class="line">            <span class="attr">"CHECKYEAR"</span>: <span class="string">"2016"</span>,</div><div class="line">            <span class="attr">"NATION"</span>: <span class="string">"1"</span>,</div><div class="line">            <span class="attr">"POLITICALSTATUS"</span>: <span class="string">"12"</span>,</div><div class="line">            <span class="attr">"LAWYERID"</span>: <span class="string">"4513"</span>,</div><div class="line">            <span class="attr">"PHOTOTYPE"</span>: <span class="string">"2"</span>,</div><div class="line">            <span class="attr">"OFFICENAME"</span>: <span class="string">"北京市盈科(广州)律师事务所"</span>,</div><div class="line">            <span class="attr">"PARTNERTYPE"</span>: <span class="string">"30"</span>,</div><div class="line">            <span class="attr">"ID"</span>: <span class="string">"4513"</span>,</div><div class="line">            <span class="attr">"CERSTATUS"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"AGE"</span>: <span class="number">52</span>,</div><div class="line">            <span class="attr">"OFFICEID"</span>: <span class="string">"106280"</span>,</div><div class="line">            <span class="attr">"LAWYER_TYPE"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"CERTIFICATE_TIME"</span>: <span class="string">"1997-11-02"</span>,</div><div class="line">            <span class="attr">"SKILLALL"</span>: <span class="string">"117,"</span>,</div><div class="line">            <span class="attr">"CERTIFICATENO"</span>: <span class="string">"14401199710164293"</span>,</div><div class="line">            <span class="attr">"ROW_ID"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"RESULT"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"QUALIFICATION_NUM"</span>: <span class="string">"赣0187"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"QUALIFICATIONDATE"</span>: <span class="string">"2011-03-14"</span>,</div><div class="line">            <span class="attr">"SXXX"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"ISLEADER"</span>: <span class="string">"1"</span>,</div><div class="line">            <span class="attr">"SEX"</span>: <span class="string">"2"</span>,</div><div class="line">            <span class="attr">"LAWYER_TYPE"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"CERTIFICATE_TIME"</span>: <span class="string">"2015-11-20"</span>,</div><div class="line">            <span class="attr">"LAWYER_NAME"</span>: <span class="string">"丁一粟"</span>,</div><div class="line">            <span class="attr">"FIRSTTIME"</span>: <span class="string">"2015-11-20"</span>,</div><div class="line">            <span class="attr">"CERTIFICATENO"</span>: <span class="string">"14403201511624464"</span>,</div><div class="line">            <span class="attr">"EDUCATION"</span>: <span class="string">"14"</span>,</div><div class="line">            <span class="attr">"CHECKYEAR"</span>: <span class="string">"2016"</span>,</div><div class="line">            <span class="attr">"ROW_ID"</span>: <span class="number">2</span>,</div><div class="line">            <span class="attr">"NATION"</span>: <span class="string">"3"</span>,</div><div class="line">            <span class="attr">"POLITICALSTATUS"</span>: <span class="string">"12"</span>,</div><div class="line">            <span class="attr">"LAWYERID"</span>: <span class="string">"219833"</span>,</div><div class="line">            <span class="attr">"PHOTOTYPE"</span>: <span class="string">"2"</span>,</div><div class="line">            <span class="attr">"OFFICENAME"</span>: <span class="string">"北京大成(深圳)律师事务所"</span>,</div><div class="line">            <span class="attr">"PARTNERTYPE"</span>: <span class="string">"30"</span>,</div><div class="line">            <span class="attr">"ID"</span>: <span class="string">"219833"</span>,</div><div class="line">            <span class="attr">"CERSTATUS"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"RESULT"</span>: <span class="string">"10"</span>,</div><div class="line">            <span class="attr">"QUALIFICATION_NUM"</span>: <span class="string">"A20104301040236"</span>,</div><div class="line">            <span class="attr">"AGE"</span>: <span class="number">38</span>,</div><div class="line">            <span class="attr">"OFFICEID"</span>: <span class="string">"102020"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"firstPage"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"prePage"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"nextPage"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"lastPage"</span>: <span class="number">8</span>,</div><div class="line">    <span class="attr">"isFirstPage"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"isLastPage"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"hasPreviousPage"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"hasNextPage"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"navigatePages"</span>: <span class="number">8</span>,</div><div class="line">    <span class="attr">"navigatepageNums"</span>: [</div><div class="line">        <span class="number">1</span>,</div><div class="line">        <span class="number">2</span>,</div><div class="line">        <span class="number">3</span>,</div><div class="line">        <span class="number">4</span>,</div><div class="line">        <span class="number">5</span>,</div><div class="line">        <span class="number">6</span>,</div><div class="line">        <span class="number">7</span>,</div><div class="line">        <span class="number">8</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"pageNum"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>至此，就能想想数据怎么存储了，返回的数据中 <strong>“total”: 39078</strong> ，说明总共有39079条数据，可以设置分页大小，可以按照100条一次进行处理，先抓取第一页，看看数据总量是多少，然后再确认分页数，正式进行爬取，输出每一行数据中的律师的姓名，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import xmltodict, json</div><div class="line">import time, math</div><div class="line">import random</div><div class="line"></div><div class="line">s = requests.Session()</div><div class="line">headers = &#123;&apos;Accept&apos; : &apos;application/json;charset=utf-8&apos;&#125;</div><div class="line">s.headers.update(headers)</div><div class="line"></div><div class="line">resu =  s.get(&apos;http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage=0&amp;limit=1&amp;_=&apos; + str(round(time.time() * 1000)))</div><div class="line">data = json.loads(resu.text)</div><div class="line"></div><div class="line">total = data[&apos;total&apos;]</div><div class="line">limit = 100</div><div class="line">page = math.ceil(total / limit)</div><div class="line"></div><div class="line">print(limit)</div><div class="line">print(page)</div><div class="line"></div><div class="line">for curPage in range(page):</div><div class="line">    resu =  s.get(&apos;http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage=&apos; + str(curPage) + &apos;&amp;limit=&apos; + str(limit) + &apos;&amp;_=&apos; + str(round(time.time() * 1000)))</div><div class="line"></div><div class="line">    # Json to dist</div><div class="line">    data = json.loads(resu.text)</div><div class="line">    </div><div class="line">    # 律师数据</div><div class="line">    rows = data[&apos;rows&apos;]</div><div class="line">    # 遍历数据</div><div class="line"></div><div class="line">    for value in rows:</div><div class="line">        print(value[&apos;LAWYER_NAME&apos;])</div><div class="line">        </div><div class="line">    # 每抓取1页，随机等待几秒</div><div class="line">    wait_time = random.choice(range(1,10))</div><div class="line">    time.sleep(wait_time)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">100</div><div class="line">391</div><div class="line">丁一元</div><div class="line">丁一粟</div><div class="line">丁上第</div><div class="line">丁义平</div><div class="line">丁子塔</div><div class="line">丁小栩</div><div class="line">丁小媚</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这些数据访问都正常了之后，就可以用使用数据库存储下来了，首先建库建表，挑了一些关键信息进行存储</p>
<p>数据表结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `lawyer` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` varchar(255) NOT NULL,</div><div class="line">  `sex` tinyint(2) DEFAULT NULL,</div><div class="line">  `qualification_date` varchar(10) DEFAULT NULL,</div><div class="line">  `first_time` varchar(10) DEFAULT NULL,</div><div class="line">  `checkyear` int(11) DEFAULT NULL,</div><div class="line">  `education` varchar(10) DEFAULT NULL,</div><div class="line">  `office_name` varchar(255) DEFAULT NULL,</div><div class="line">  `certificate_no` bigint(20) DEFAULT NULL,</div><div class="line">  `qualification_num` varchar(255) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1152 DEFAULT CHARSET=utf8mb4;</div></pre></td></tr></table></figure>
<p>完整代码如下，添加了部分统计代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> xmltodict, json</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> time, math, datetime</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment"># Mysql数据库连接</span></div><div class="line">db = pymysql.connect(<span class="string">"127.0.0.1"</span>,<span class="string">"root"</span>,<span class="string">"xxxxxx"</span>,<span class="string">"lawyar"</span>,use_unicode=<span class="keyword">True</span>,charset=<span class="string">"utf8"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line">s = requests.Session()</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Accept'</span> : <span class="string">'application/json;charset=utf-8'</span></div><div class="line">&#125;</div><div class="line">s.headers.update(headers)</div><div class="line"></div><div class="line">resu =  s.get(<span class="string">'http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage=0&amp;limit=1&amp;_='</span> + str(round(time.time() * <span class="number">1000</span>)))</div><div class="line"></div><div class="line"><span class="comment"># Json to dist</span></div><div class="line">data = json.loads(resu.text)</div><div class="line">total = data[<span class="string">'total'</span>]</div><div class="line">limit = <span class="number">100</span></div><div class="line">page = math.ceil(total / limit)</div><div class="line">print(<span class="string">"数据总量："</span> + str(total))</div><div class="line">print(<span class="string">"总页数："</span> + str(page))</div><div class="line">print(<span class="string">"预计总执行时间：%ss"</span> % (str(total/<span class="number">9</span>)))</div><div class="line"><span class="comment"># 总时间</span></div><div class="line">start = datetime.datetime.now()</div><div class="line">count_wait_time = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> curPage <span class="keyword">in</span> range(page):</div><div class="line">    resu =  s.get(<span class="string">'http://credit.gdlawyer.org.cn/front/indexFront/getLawyerOrOrgListData?time_=&amp;type=1&amp;title=&amp;city=0&amp;ognforms=0&amp;curpage='</span> + str(curPage) + <span class="string">'&amp;limit='</span> + str(limit) + <span class="string">'&amp;_='</span> + str(round(time.time() * <span class="number">1000</span>)))</div><div class="line"></div><div class="line">    <span class="comment"># Json to dist</span></div><div class="line">    data = json.loads(resu.text)</div><div class="line"></div><div class="line">    <span class="comment"># 律师数据</span></div><div class="line">    rows = data[<span class="string">'rows'</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 遍历数据</span></div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> rows:</div><div class="line">        sql = <span class="string">"INSERT INTO `lawyer`(`name`, `sex`, `qualification_date`, \</span></div><div class="line">        `first_time`, `checkyear`, `education`, `office_name`, `certificate_no`, `qualification_num`) \</div><div class="line">        VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s')" % \</div><div class="line">        (value.get(<span class="string">'LAWYER_NAME'</span>), value.get(<span class="string">'SEX'</span>), value.get(<span class="string">'QUALIFICATIONDATE'</span>), value.get(<span class="string">'FIRSTTIME'</span>), \</div><div class="line">        value.get(<span class="string">'CHECKYEAR'</span>), value.get(<span class="string">'EDUCATION'</span>), value.get(<span class="string">'OFFICENAME'</span>), value.get(<span class="string">'CERTIFICATENO'</span>), value.get(<span class="string">'QUALIFICATION_NUM'</span>))</div><div class="line">    </div><div class="line">        sql = sql.replace(<span class="string">'\'None\''</span>, <span class="string">'0'</span>)</div><div class="line">        sql.encode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="comment"># print(sql)</span></div><div class="line">        cursor.execute(sql)</div><div class="line"></div><div class="line">    <span class="comment"># 提交数据到数据库</span></div><div class="line">    db.commit()</div><div class="line">    wait_time = random.choice(range(<span class="number">1</span>,<span class="number">10</span>))</div><div class="line">    count_wait_time += wait_time</div><div class="line">    print(<span class="string">"当前第%d页，等待%ds"</span> % (curPage, wait_time))</div><div class="line">    time.sleep(wait_time)</div><div class="line"></div><div class="line"><span class="comment"># 关闭数据库连接</span></div><div class="line">db.close()</div><div class="line">print(<span class="string">"数据保存完毕，总执行时间：%ss，总等待时间：%ds"</span> % (str(datetime.datetime.now() - start), count_wait_time))</div></pre></td></tr></table></figure>
<p>以下是我将total手动定义为560时的执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">数据总量：560</div><div class="line">总页数：6</div><div class="line">预计总执行时间：62.22222222222222s</div><div class="line">当前第0页，等待4s</div><div class="line">当前第1页，等待6s</div><div class="line">当前第2页，等待5s</div><div class="line">当前第3页，等待2s</div><div class="line">当前第4页，等待8s</div><div class="line">当前第5页，等待8s</div><div class="line">数据保存完毕，总执行时间：0:01:12.207355s，总等待时间：33s</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>前后端分离的网站，都能使用这种方式爬取数据，如果数据在HTML中，就只能使用爬虫了，近期如果有时间，再出一篇爬虫的文章。</p>
<h5 id="本文为原创文章，转载请注明出处（https-whark-cn）。"><a href="#本文为原创文章，转载请注明出处（https-whark-cn）。" class="headerlink" title="本文为原创文章，转载请注明出处（https://whark.cn）。"></a>本文为原创文章，转载请注明出处（<a href="https://whark.cn">https://whark.cn</a>）。</h5>]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP的容器 -- 依赖注入(DI) 和 控制反转(IoC)]]></title>
      <url>https://whark.cn/2018/03/25/DI-and-IoC/</url>
      <content type="html"><![CDATA[<p>本文内容大部分参考自：<a href="https://juejin.im/post/590c63ad1b69e600683bf8ea" target="_blank" rel="external">对PHP框架中的容器的理解</a></p>
<h4 id="PHP的容器-–-依赖注入-DI-和-控制反转-IoC"><a href="#PHP的容器-–-依赖注入-DI-和-控制反转-IoC" class="headerlink" title="PHP的容器 – 依赖注入(DI) 和 控制反转(IoC)"></a>PHP的容器 – 依赖注入(DI) 和 控制反转(IoC)</h4><h5 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI  - Dependency Injection  依赖注入"></a>DI  - Dependency Injection  依赖注入</h5><h5 id="IoC-Inversion-of-Control-控制反转"><a href="#IoC-Inversion-of-Control-控制反转" class="headerlink" title="IoC - Inversion of Control  控制反转"></a>IoC - Inversion of Control  控制反转</h5><p>依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是它们描述的角度不同。</p>
<ul>
<li>依赖注入是从应用程序的角度在描述，可以把依赖注入，即：应用程序依赖容器创建并注入它所需要的外部资源；</li>
<li>而控制反转是从容器的角度在描述，即：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。</li>
</ul>
<h4 id="实现一个容器"><a href="#实现一个容器" class="headerlink" title="实现一个容器"></a>实现一个容器</h4><pre><code>//根据我们的上面的分析，容器至少需要俩个操作，分别是将类绑定到容器中以及将类从容器中取出的操作
class Container
{
    //容器类列表
    public static $generator_list = [];

    // 绑定类到容器中 
    public static function bind($class_name, $generator)
    {
        if (is_callable($generator)) {
            self::$generator_list[$class_name] = $generator;
        } else {
            throw new Exception(&apos;对象生成器不是可以调用的类型&apos;);
        }
    }

    // 生成类对象
    public static function make($class_name, $params = [])
    {
        if (! isset(self::$generator_list[$class_name])) {
            throw new Exception($class_name.&apos;类没有被绑定注册&apos;);
        }
        return call_user_func_array(self::$generator_list[$class_name], $params);
    }
}
</code></pre><h4 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h4><pre><code>//我们先看一下bind()函数,该函数对应上面说到的绑定操作，就是将一个类放到$generator_list中，仔细看一下，你会发现，该函数并不是把一个类或者一个对象直接传递进去，而是传入了两个参数,一个是参数的名字，一个是生成器。
//生成器说白了就是一个函数，这个函数是用来负责实例化需要绑定的类的。
//说到这里,有同学可能有点疑惑，为什么要这样，为什么不直接传一个对象进去那?
//原因是类的实例化的过程是需要传递参数的，传递一个生成器进去，我们在实例化这个类的时候就可以修改参数了。
//下面就是一个绑定示例，大家可以看一下。
    Container::bind(&quot;A&quot;,function($param){
       return A($param);
    })
    self::$generator_list[&quot;A&quot;] = function($param){
       return A($param);
    };
//这样，我们的绑定操作基本就说完了，下面看make()函数。之前也已经提到过了,make()函数就是将所需要的对象从这个容器中取出来。该函数也需要传递两个参数进去，一个是class_name也就是需要取出的类的名称,一个是params,也就是实例化对象的时候需要传递的参数。
//下面的一行代码是整个函数的关键所在:
call_user_func_array(self::$generator_list[$class_name], $params);
self::$generator_list[$class_name]对应的是类的生成器,$params对应的是类实例化所需要的参数，
//call_user_func_array()该函数是PHP的内置函数，通过该函数我们可以执行self::$generator_list[$class_name]对应的是类的生成器函数，这样我们也就是完成了所需类的实例化。(ps：对call_user_func_array()函数不清楚的同学可以先去看一下手册)
</code></pre><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><pre><code>//将类A的生成器函数(匿名函数/闭包)绑定到容器中
Container::bind(&apos;A&apos;, function($name=&apos;&apos;) {
    return new A($title);
});
//在容器类中获取类A的对象
$Obj = Container::make(&apos;A&apos;, [&apos;aaa&apos;]);
//打印出得到的这个对象
var_dump($Obj);
//打印结果如下:
object(A)#2 (1) {
  [&quot;name&quot;]=&gt;
  string(4) &quot;aaa&quot;
}
//我们在打印出self::$generator_list中的数据看一下:
array(1) {
  [&quot;A&quot;]=&gt;
  object(Closure)#1 (1) {
    [&quot;parameter&quot;]=&gt;
    array(1) {
      [&quot;$name&quot;]=&gt;
      string(10) &quot;&quot;
    }
  }
}
</code></pre><p>怎么样,看到上面打印出来的节后是不是就清楚一些了那…上面我们分析了一下容器类的具体的执行方式，上面的代码比较的简单，也灭有涉及到类相互依赖的问题，相比大家肯定想看一下类相互依赖的时候，容器类是怎么为我们解决依赖的，我们下面就写一个例子再分析一下，其实容器的代码我们基本不需要在动了。</p>
<pre><code>//最开始的我们就举了一个B类依赖于A类的例子，现在我们继续使用这个例子来说明一下
//绑定A类到容器中
Container::bind(&apos;A&apos;, function($name=&apos;&apos;) {
    return new A($title);
});
//绑定B类到容器中
Container::bind(&apos;B&apos;, function($module,$params=[]) {
    return new B(Container::make($module,$params));
});
//上面B类的绑定方式大家可能觉得有点怪，这是因为B类依赖于A类,所以我们在B类的生成器对象中(匿名函数)中需要得到A类的实例传参给B，
//怎么获取A类的实例那，简单，因为A类也存在于容器中，所以我们直接调用make()函数就可以获取A类的实例对象了，
//但是在实例化A类的时候，构造函数可能需要参数，为了能够得到这些参数，我们就需要在B类的生成器对象中将这些参数传递进来。
//下面我们调用一下B类
$Obj= Container::make(&apos;B&apos;, [&apos;A&apos;, [&apos;aaa&apos;]]);
//上面我们就获取到了B类的实例化的对象了，是不是很简单，有兴趣的同学可以将上面的结果打印出来看一下。
//我们再分析一下上面的步骤，想要获取B类的实例化对象,直接通过make()进行获取,
//因为B依赖于A，所以需要传递A到生成器函数中，但是A有需要其他的参数，所以我们还需要继续传递其他参数进去，所以参数就是一个二维数组
//上面对参数有疑问的同学可以按照上面的流程分析一遍，就清楚了
</code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>想要实现容器的自动依赖注入，需要使用反射，通过反射，获取类构造函数所需的参数，分析出所依赖的类，然后在容器中获取其所依赖的类，其实就是一层一层的找需要什么，需要什么就在容器中找什么，找到了就作为参数传递过去，这样就实现了自动注入解决了依赖的问题。</p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 控制反转 </tag>
            
            <tag> 容器 </tag>
            
            <tag> 注册树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的站点]]></title>
      <url>https://whark.cn/2018/03/24/website-page-add-authentication/</url>
      <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 给指定URL添加访问控制</div><div class="line"> */</div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line">$html = <span class="string">&lt;&lt;&lt;html</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        #input-text &#123;</div><div class="line">            width: auto;</div><div class="line">            padding: 0.5em 1em;</div><div class="line">            border: 1px solid #ccc;</div><div class="line">            border-radius: 0.2em;</div><div class="line">            height: auto;</div><div class="line">            font-size: 2em;</div><div class="line">        &#125;</div><div class="line">        #input-submit &#123;</div><div class="line">            color: #fff;</div><div class="line">            background-color: #337ab7;</div><div class="line">            border-color: #2e6da4;</div><div class="line">            margin-left: 1em;</div><div class="line">            padding: 0.4em 1em;</div><div class="line">            border: 1px solid transparent;</div><div class="line">            border-radius: 0.2em;</div><div class="line">            font-size: 2em;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;div class="text-center" style="padding-top: 20%;text-align: center"&gt;</div><div class="line">    &lt;form action="live_url" method="post"&gt;</div><div class="line">    &lt;input id="input-text" type="password" placeholder="请输入访问密码：" name="live_auth"/&gt;</div><div class="line">    &lt;input id="input-submit" type="submit" value="进入"&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">html;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 给特定页面进行密码验证</div><div class="line"> */</div><div class="line"> <span class="comment">/*********** Solution One *********/</span></div><div class="line"></div><div class="line">$url = [</div><div class="line">    <span class="string">'/20180328'</span>,</div><div class="line">    <span class="string">'/20180329'</span></div><div class="line">];</div><div class="line">$auth_name = [</div><div class="line">    <span class="string">'live_auth0328'</span>,</div><div class="line">    <span class="string">'live_auth0329'</span>,</div><div class="line">];</div><div class="line">$auth_passwd = [</div><div class="line">    <span class="string">'12345678'</span>,</div><div class="line">    <span class="string">'123456'</span>,</div><div class="line">];</div><div class="line"></div><div class="line">$key = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST)) &#123;</div><div class="line">	<span class="comment">// POST字段匹配</span></div><div class="line">	$postDataKey = array_keys($_POST)[<span class="number">0</span>];</div><div class="line">	$key = array_search($postDataKey, $auth_name, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$path = parse_url( $_SERVER[<span class="string">'REQUEST_URI'</span>] )[<span class="string">'path'</span>];</div><div class="line">$key = $key ?: array_search( $path, $url, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($key !== <span class="string">''</span> &amp;&amp; $key !== <span class="keyword">FALSE</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[$auth_name[$key]]) &amp;&amp; $_POST[$auth_name[$key]] === $auth_passwd[$key]) &#123;</div><div class="line">		$_SESSION[$auth_name[$key]] = <span class="string">'1'</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ($path === $url[$key]) &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[$auth_name[$key]]) || $_SESSION[$auth_name[$key]] !== <span class="string">'1'</span>) &#123;</div><div class="line">			$html = str_replace(<span class="string">'live_auth'</span>, $auth_name[$key], $html);</div><div class="line">			$html = str_replace(<span class="string">'live_url'</span>, $url[$key], $html);</div><div class="line">			<span class="keyword">echo</span> $html;<span class="keyword">die</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*********** Solution Two *********/</span></div><div class="line"><span class="comment">/*</span></div><div class="line">//20180328</div><div class="line">$url = '/20180328';</div><div class="line">$auth_name = 'live_auth0328';</div><div class="line">$auth_passwd = '12345678';</div><div class="line">if (isset($_POST[$auth_name]) &amp;&amp; $_POST[$auth_name] === $auth_passwd) &#123;</div><div class="line">    $_SESSION[$auth_name] = '1';</div><div class="line">&#125;</div><div class="line">if (parse_url( $_SERVER['REQUEST_URI'] )['path'] === $url) &#123;</div><div class="line">    if (!isset($_SESSION[$auth_name]) || $_SESSION[$auth_name] !== '1') &#123;</div><div class="line">        $html = str_replace('live_auth', $auth_name, $html);</div><div class="line">		$html = str_replace('live_url', $url, $html);</div><div class="line">        echo $html;die;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//20180329</div><div class="line">$url = '/20180329';</div><div class="line">$auth_name = 'live_auth0329';</div><div class="line">$auth_passwd = '123456';</div><div class="line">if (isset($_POST[$auth_name]) &amp;&amp; $_POST[$auth_name] === $auth_passwd) &#123;</div><div class="line">    $_SESSION[$auth_name] = '1';</div><div class="line">&#125;</div><div class="line">if (parse_url( $_SERVER['REQUEST_URI'] )['path'] === $url) &#123;</div><div class="line">    if (!isset($_SESSION[$auth_name]) || $_SESSION[$auth_name] !== '1') &#123;</div><div class="line">        $html = str_replace('live_auth', $auth_name, $html);</div><div class="line">		$html = str_replace('live_url', $url, $html);</div><div class="line">        echo $html;die;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> website </tag>
            
            <tag> PHP </tag>
            
            <tag> 访问控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows使用常用小技巧与翻墙]]></title>
      <url>https://whark.cn/2017/12/28/windows-skills-and-over-the-net-wall/</url>
      <content type="html"><![CDATA[<h3 id="Windows常用小技巧"><a href="#Windows常用小技巧" class="headerlink" title="Windows常用小技巧"></a>Windows常用小技巧</h3><h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><h5 id="窗口切换快捷键："><a href="#窗口切换快捷键：" class="headerlink" title="窗口切换快捷键："></a>窗口切换快捷键：</h5><pre><code>Win+上/下：使应用窗口在最大化，正常状态以及最小化之间进行切换
Win+左/右：使应用窗口在占据左/右半边屏幕以及正常状态之间进行切换
Win+左/右 &gt;Win+上/下：使应用窗口占据屏幕四个角落1/4的屏幕区域
Win+Tab：显示所有已打开的应用和桌面
Win+Ctrl+D：新建桌面
Win+Ctrl+F4：关闭正在使用的桌面
Win+Ctrl+左/右：在已打开的桌面之间进行切换
ALT+Tab
Ctrl+ALT+TAB（滞留预览窗口）
</code></pre><h5 id="照片应用键盘快捷键："><a href="#照片应用键盘快捷键：" class="headerlink" title="照片应用键盘快捷键："></a>照片应用键盘快捷键：</h5><pre><code>Ctrl+/：快速将编辑后的照片与原始照片进行对比
Ctrl+R：旋转照片
Ctrl+加号：放大照片
Ctrl+减号：缩小照片
</code></pre><h5 id="精确式触摸板操作手势："><a href="#精确式触摸板操作手势：" class="headerlink" title="精确式触摸板操作手势："></a>精确式触摸板操作手势：</h5><p>注意：需要使用精确式触摸板才能使用这些操作手势，比如Surface键盘中的触摸板。</p>
<pre><code>三个手指向上轻扫：打开任务视图查看所有窗口
三个手指向下轻扫：显示桌面
三个手指向左侧或右侧轻扫：在打开的窗口之间进行切换。
</code></pre><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><pre><code>#开机启动软件管理
Win + R，输入msconfig，点击启动，禁用无用启动项

#休眠计算机
Win + R，输入shutdown -h

#定时关闭计算机（-t 后是时间参数，单位为秒）
Win + R, 输入shutdown-s -t 3600

#取消定时关机
Win + R，输入shutdown -a
</code></pre><h5 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h5><ul>
<li><p>文件查找：<a href="https://www.voidtools.com/downloads" target="_blank" rel="external">everything</a></p>
</li>
<li><p>优雅打开应用：<a href="http://www.launchy.net" target="_blank" rel="external">launchy</a></p>
</li>
<li><p>跨平台IDE：</p>
<p>​    微软出品：<a href="https://code.visualstudio.com/" target="_blank" rel="external">VS code</a></p>
<p>​    Github出品：<a href="https://atom.io/" target="_blank" rel="external">ATOM</a></p>
</li>
</ul>
<h3 id="Chrome插件推荐"><a href="#Chrome插件推荐" class="headerlink" title="Chrome插件推荐"></a>Chrome插件推荐</h3><ul>
<li>屏蔽广告：<a href="https://github.com/guidesmiths/adblock-plus-crx/raw/master/bin/Adblock-Plus_v1.12.4.crx" target="_blank" rel="external">Adblock</a><a href="https://github.com/guidesmiths/adblock-plus-crx/raw/master/bin/Adblock-Plus_v1.12.4.crx" target="_blank" rel="external">-Plus</a></li>
<li>记录网页内容：<a href="http://funp.in/" target="_blank" rel="external">方片收集</a></li>
<li>代理插件：<a href="https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.10/SwitchyOmega_Chromium.crx" target="_blank" rel="external">SwitchyOmega</a></li>
<li>黑客级别插件：<a href="https://jeffjade.com/2015/10/19/2015-10-18-chrome-vimium/" target="_blank" rel="external">Vimium</a></li>
</ul>
<h3 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h3><p>推荐自己购买VPS服务器搭建SSR服务，比较安全，网上分享的免费帐号和免费软件，都不安全，数据走的他们的服务器，有些还留了有后门，为了数据安全还是自建吧。</p>
<p>自己用的是 <a href="https://www.vultr.com/?ref=7323972" target="_blank" rel="external">Vultr</a>（$2.5/月）和 <a href="https://m.do.co/c/f6107e737cf4" target="_blank" rel="external">Digitalocean</a> （$5/月）的，性价比来说是最好的，之前 <a href="https://bandwagonhost.com/vps-hosting.php" target="_blank" rel="external">搬瓦工</a>（$19.99/年）挺便宜的，但现在这个套餐已经没了。</p>
<h5 id="桌面客户端"><a href="#桌面客户端" class="headerlink" title="桌面客户端"></a>桌面客户端</h5><p><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="external">shadowsocks-windows</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">shadowsocks-mac</a></p>
<h5 id="移动客户端"><a href="#移动客户端" class="headerlink" title="移动客户端"></a>移动客户端</h5><p><a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases" target="_blank" rel="external">shadowsocks-android</a></p>
<p><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6" target="_blank" rel="external">shadowsocks-ios</a></p>
<h5 id="自建服务端"><a href="#自建服务端" class="headerlink" title="自建服务端"></a>自建服务端</h5><p><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="external">自建SSR服务器教程</a></p>
<p><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAv2ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="external">自建v2ray服务器教程</a></p>
<p><a href="https://blog.csdn.net/zdy1127/article/details/50664736" target="_blank" rel="external">Centos7搭建pptp VPN一键安装脚本</a></p>
<h6 id="水管变水桶的BBR："><a href="#水管变水桶的BBR：" class="headerlink" title="水管变水桶的BBR："></a>水管变水桶的BBR：</h6><p><a href="https://teddysun.com/489.html" target="_blank" rel="external">一键安装最新内核并开启 BBR 脚本</a></p>
]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> Windows </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> VPN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker的使用]]></title>
      <url>https://whark.cn/2017/11/23/use-of-docker/</url>
      <content type="html"><![CDATA[<h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的<br>Linux 机器上，也可以实现虚拟化。</p>
<h4 id="Docker组件"><a href="#Docker组件" class="headerlink" title="Docker组件"></a>Docker组件</h4><ul>
<li><p>Docker Client：客户端         —&gt; 向docker服务器进程发起请求，如：创建、停止、销毁容器等操作</p>
</li>
<li><p>Docker Server：服务器进程 —&gt; 处理所有docker的请求，管理所有容器</p>
</li>
<li><p>Docker Registry：镜像仓库  —&gt; 镜像存放的中央仓库，可看作是存放二进制的scm</p>
<p><img src="https://whark.oss-cn-hangzhou.aliyuncs.com/posts/docker-modules.png" alt="docker-modules"></p>
</li>
</ul>
<h3 id="Docker相关教程"><a href="#Docker相关教程" class="headerlink" title="Docker相关教程"></a>Docker相关教程</h3><p><a href="http://dockone.io/article/131" target="_blank" rel="external">Dockerfile最佳实践</a></p>
<p><a href="https://www.awaimai.com/2120.html" target="_blank" rel="external">Docker搭建可一键部署的多域名LNMP环境</a></p>
<p><a href="https://blog.csdn.net/qq_36763896/article/details/53293088" target="_blank" rel="external">7 步精简 Docker 镜像几百MB</a></p>
<p><a href="https://goaccess.io/download" target="_blank" rel="external">搭建nginx访问日志分析工具Goaccess</a></p>
<p><a href="https://docs.docker.com/samples/library/php/" target="_blank" rel="external">Docker镜像源中PHP的方法</a></p>
<h4 id="Docker中PHP环境安装扩展的方法："><a href="#Docker中PHP环境安装扩展的方法：" class="headerlink" title="Docker中PHP环境安装扩展的方法："></a>Docker中PHP环境安装扩展的方法：</h4><pre><code>docker-php-ext-install redis
</code></pre><h5 id="PHP-CORE-EXTENSIONS"><a href="#PHP-CORE-EXTENSIONS" class="headerlink" title="PHP CORE EXTENSIONS"></a>PHP CORE EXTENSIONS</h5><pre><code>FROM php:7.0-fpm
RUN apt-get update &amp;&amp; apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng-dev \
    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \
    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    &amp;&amp; docker-php-ext-install -j$(nproc) gd
</code></pre><h5 id="PECL-EXTENSIONS"><a href="#PECL-EXTENSIONS" class="headerlink" title="PECL EXTENSIONS"></a>PECL EXTENSIONS</h5><pre><code>FROM php:7.1-fpm
RUN pecl install redis-3.1.0 \
    &amp;&amp; pecl install xdebug-2.5.0 \
    &amp;&amp; docker-php-ext-enable redis xdebug

FROM php:5.6-fpm
RUN apt-get update &amp;&amp; apt-get install -y libmemcached-dev zlib1g-dev \
    &amp;&amp; pecl install memcached-2.2.0 \
    &amp;&amp; docker-php-ext-enable memcached
</code></pre><h5 id="OTHER-EXTENSIONS"><a href="#OTHER-EXTENSIONS" class="headerlink" title="OTHER EXTENSIONS"></a>OTHER EXTENSIONS</h5><pre><code>FROM php:5.6-apache
RUN curl -fsSL &apos;https://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz&apos; -o xcache.tar.gz \
    &amp;&amp; mkdir -p xcache \
    &amp;&amp; tar -xf xcache.tar.gz -C xcache --strip-components=1 \
    &amp;&amp; rm xcache.tar.gz \
    &amp;&amp; ( \
        cd xcache \
        &amp;&amp; phpize \
        &amp;&amp; ./configure --enable-xcache \
        &amp;&amp; make -j$(nproc) \
        &amp;&amp; make install \
    ) \
    &amp;&amp; rm -r xcache \
    &amp;&amp; docker-php-ext-enable xcache
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> 容器 </tag>
            
            <tag> Docker </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派初始化配置]]></title>
      <url>https://whark.cn/2017/11/12/first-use-raspberry-pi/</url>
      <content type="html"><![CDATA[<h2 id="更换国内镜像源"><a href="#更换国内镜像源" class="headerlink" title="更换国内镜像源"></a>更换国内镜像源</h2><p>很多教程没有写完整，更换源需要修改两个文件。<br>经过我的测试，发现两个文件分别使用阿里和中科大的效果最好。</p>
<h5 id="source-list"><a href="#source-list" class="headerlink" title="source.list"></a>source.list</h5><pre><code>sudo nano /etc/apt/sources.list
</code></pre><p>将原来的配置注释掉，添加第二行即可</p>
<pre><code>#deb http://mirrordirector.raspbian.org/raspbian/ jessie main contrib non-free rpi
deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main contrib non-free rpi
# Uncomment line below then &apos;apt-get update&apos; to enable &apos;apt-get source&apos;
#deb-src http://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi
</code></pre><h5 id="raspi-list"><a href="#raspi-list" class="headerlink" title="raspi.list"></a>raspi.list</h5><p>使用中科大镜像源</p>
<pre><code>sudo nano /etc/apt/sources.list.d/raspi.list
</code></pre><p>将原来的配置注释掉，添加第二行即可</p>
<pre><code>#deb http://archive.raspberrypi.org/debian/ jessie main ui
deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main ui
# Uncomment line below then &apos;apt-get update&apos; to enable &apos;apt-get source&apos;
#deb-src http://archive.raspberrypi.org/debian/ jessie main ui
</code></pre><h2 id="连接-WiFi"><a href="#连接-WiFi" class="headerlink" title="连接 WiFi"></a>连接 WiFi</h2><p>编辑 wifi 文件</p>
<pre><code>sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre><p>在该文件最后添加：</p>
<pre><code>network={
  ssid=&quot;wifiname&quot;
  psk=&quot;password&quot;
}
</code></pre><p><code>引号部分分别为 WiFi 的名字和密码</code></p>
<p>保存文件后几秒钟应该就会自动连接到该 WiFi<br>或者执行</p>
<pre><code>sudo ifdown wlan0
sudo ifup wlan0
</code></pre><p>查看是否连接成功</p>
<pre><code>ifconfig wlan0
</code></pre><h2 id="设置静态-IP-地址"><a href="#设置静态-IP-地址" class="headerlink" title="设置静态 IP 地址"></a>设置静态 IP 地址</h2><pre><code>sudo nano /etc/network/interfaces

allow-hotplug wlan0
iface wlan0 inet static # 将 manual 改为 static
    address 192.168.1.111 # 静态地址
    netmask 255.255.255.0 # 网络掩码
    gateway 192.168.1.1 # 网关
    network 192.168.1.1 # 网络地址
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre><p>wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf 可以替换为以下设置方式</p>
<pre><code>wpa-ssid Your_Wifi_SSID
wpa-psk Your_Wifi_Password
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> source </tag>
            
            <tag> ip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[转载：配置Github Webhooks自动部署项目]]></title>
      <url>https://whark.cn/2017/06/02/set-github-webhook/</url>
      <content type="html"><![CDATA[<p>转载自：<a href="https://www.jianshu.com/p/e4cacd775e5b" target="_blank" rel="external">利用Github的Webhook功能和Node.js完成项目的自动部署</a></p>
<h3 id="首先完成Node-js服务器的代码构建，先上代码，再解释"><a href="#首先完成Node-js服务器的代码构建，先上代码，再解释" class="headerlink" title="首先完成Node.js服务器的代码构建，先上代码，再解释"></a>首先完成Node.js服务器的代码构建，先上代码，再解释</h3><pre><code>var http = require(&apos;http&apos;)
var createHandler = require(&apos;github-webhook-handler&apos;)
var handler = createHandler({ path: &apos;/&apos;, secret: &apos;root&apos; })
// 上面的 secret 保持和 GitHub 后台设置的一致

function run_cmd(cmd, args, callback) {
  var spawn = require(&apos;child_process&apos;).spawn;
  var child = spawn(cmd, args);
  var resp = &quot;&quot;;

  child.stdout.on(&apos;data&apos;, function(buffer) { resp += buffer.toString(); });
  child.stdout.on(&apos;end&apos;, function() { callback (resp) });
}

http.createServer(function (req, res) {
  handler(req, res, function (err) {
    res.statusCode = 404
    res.end(&apos;no such location&apos;)
  })
}).listen(7777)

handler.on(&apos;error&apos;, function (err) {
  console.error(&apos;Error:&apos;, err.message)
})

handler.on(&apos;push&apos;, function (event) {
  console.log(&apos;Received a push event for %s to %s&apos;,
    event.payload.repository.name,
    event.payload.ref);
    run_cmd(&apos;sh&apos;, [&apos;./deploy.sh&apos;,event.payload.repository.name], function(text){ console.log(text) });
})
</code></pre><p>上面的代码中用到了一个github-webhook-handler的中间件，你可以用 <strong>npm install -g github-webhook-handler</strong> 来全局安装。</p>
<p>还有代码这行:</p>
<pre><code>var handler = createHandler({ path: &apos;/&apos;, secret: &apos;root&apos; }) 
</code></pre><p>其中secret后的参数是你在github的项目中添加webhook时设置的secret值，替换成自己的就行了</p>
<h3 id="完成deploy-sh脚本"><a href="#完成deploy-sh脚本" class="headerlink" title="完成deploy.sh脚本"></a>完成deploy.sh脚本</h3><p>deploy.sh脚本负责进入项目的目录，然后利用git命令拉取最新的代码，还是直接贴代码:</p>
<pre><code>#!/bin/bash

WEB_PATH=&apos;/root/tools/&apos;$1
WEB_USER=&apos;root&apos;
WEB_USERGROUP=&apos;root&apos;

echo &quot;Start deployment&quot;
cd $WEB_PATH
echo &quot;pulling source code...&quot;
git reset --hard origin/master
git clean -f
git pull
git checkout master
echo &quot;changing permissions...&quot;
chown -R $WEB_USER:$WEB_USERGROUP $WEB_PATH
echo &quot;Finished.&quot;
</code></pre><p>deploy.sh 会接受第一个参数当做项目名字，然后进入这个项目的目录执行git操作，这个参数是在deploy.js中根据hook返回的项目名字来的，代码应该比较容易懂，都是些简单的git命令。</p>
<pre><code>如果是全新的项目，需要在你的服务器上先clone要部署的项目
你需要根据自己的实际项目位置，修改WEB_PATH的值
</code></pre><h3 id="后台运行deploy-js"><a href="#后台运行deploy-js" class="headerlink" title="后台运行deploy.js"></a>后台运行deploy.js</h3><p>利用Linux提供的nohup命令，让deploy.js运行在后台</p>
<pre><code>nohup node deploy.js &gt; deploy.log &amp;
</code></pre><h3 id="去Github后台添加webhook"><a href="#去Github后台添加webhook" class="headerlink" title="去Github后台添加webhook"></a>去Github后台添加webhook</h3><p>进入你需要自动部署的项目的github地址，进入项目的设置页面，点击左侧的 <strong>Webhooks &amp; services</strong><br>!<img src="https://whark.oss-cn-hangzhou.aliyuncs.com/posts/hithub-webhook.jpg" alt="hithub-webhook"></p>
]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> Github </tag>
            
            <tag> Webhooks </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为树莓派配置开机自动上传IP]]></title>
      <url>https://whark.cn/2017/06/01/how-to-know-respberry-ip/</url>
      <content type="html"><![CDATA[<h3 id="查询IP并上传IP"><a href="#查询IP并上传IP" class="headerlink" title="查询IP并上传IP"></a>查询IP并上传IP</h3><h4 id="ip-sh"><a href="#ip-sh" class="headerlink" title="ip.sh"></a>ip.sh</h4><pre><code>#!/bin/bash

#outside_ip
ip1=`curl -s ipecho.net/plain`

#inside_ip
ip2=`LC_ALL=C ifconfig|grep &quot;inet addr:&quot;|grep -v &quot;127.0.0.1&quot;| cut -d: -f2|awk &apos;{print $1}&apos;`
ip3=`LC_ALL=C ifconfig|grep &quot;[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}&quot;|grep -v &quot;127.0.0.1&quot;|cut -d: -f2|awk &apos;{print $2}&apos;|head -n 1`
if [ ! -n &quot;$ip2&quot; ];
then
    ip2=$ip3
fi

url=&apos;ip.whark.cn&apos;

#change your name
name=&apos;test_ubuntu&apos;

while getopts :ha:o:i: OPTION
do
case $OPTION in
a) name=$OPTARG ;;
o) ip1=$OPTARG ;;
i) ip2=$OPTARG ;;
h)
echo -e &quot;help:\n  -a \tname&quot;
echo -e &quot;  -o \tthe outside ip&quot;
echo -e &quot;  -i \tthe inside ip&quot;
echo -e &quot;  -h \thelp document&quot;
exit ;;
\?) ;;
esac
done

url2=&quot;$url?outside_ip=$ip1&amp;inside_ip=$ip2&amp;name=$name&quot;
#echo $url2
curl $url2

echo -e &quot;Client : Successful!&quot;
</code></pre><p>编辑<strong>ip.sh</strong>并保存</p>
<pre><code>chmod +x ip.sh
</code></pre><p>查询IP并上传</p>
<pre><code>./ip.sh
</code></pre><p>然后在 <a href="http://ip.whark.cn" target="_blank" rel="external">ip.whark.cn</a> 查看<br>也可以使用参数,”-h” 获取参数列表</p>
<pre><code>./ip.sh --help
# -a 指定本机的名称，如：
./ip.sh -a test_ubuntu
</code></pre><h3 id="配置开机自动执行"><a href="#配置开机自动执行" class="headerlink" title="配置开机自动执行"></a>配置开机自动执行</h3><h4 id="config-sh"><a href="#config-sh" class="headerlink" title="config.sh"></a>config.sh</h4><pre><code>#!/bin/bash
path=`pwd`
file_name=&quot;ip.sh&quot;
file_path=&quot;$path/$file_name&quot;

echo &quot;#auto upload local ip address&quot; &gt;&gt; /etc/rc.d/rc.local

#change your name in here
#echo &quot;$file_path -a your_name &gt; /dev/null&quot; &gt;&gt; /etc/rc.d/rc.local

if [ ! -n &quot;$1&quot; ]
then
    echo &quot;$file_path &gt; /dev/null 2&gt;&amp;1&quot; &gt;&gt; /etc/rc.d/rc.local
else
    echo &quot;$file_path -a $1 &gt; /dev/null 2&gt;&amp;1&quot; &gt;&gt; /etc/rc.d/rc.local
fi
</code></pre><p>编辑<strong>config.sh</strong>并保存</p>
<pre><code>chmod +x config.sh
</code></pre><p>执行config.sh，添加到开机启动</p>
<pre><code>./config.sh
</code></pre><p>可直接添加参数name</p>
<pre><code>./config.sh your_name
</code></pre><p>第二次配置时，需要将 /etc/rc.d/rc.local 文件中，前一次添加的内容删除</p>
]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux检测远程端口是否打开]]></title>
      <url>https://whark.cn/2017/05/30/scan-port/</url>
      <content type="html"><![CDATA[<p>本文介绍3种检测远程端口方式，telnet、nmap和nc。如果Linux提示找不到命令，请用apt-get或者yum安装。</p>
<h3 id="1-telnet方式"><a href="#1-telnet方式" class="headerlink" title="1 telnet方式"></a>1 telnet方式</h3><pre><code>telnet ip port
</code></pre><p>如果提示Connected to ip，说明该端口可以访问。<br>如果超时，说明端口未开放。</p>
<h3 id="2-nmap方式"><a href="#2-nmap方式" class="headerlink" title="2 nmap方式"></a>2 nmap方式</h3><pre><code>nmap ip -p port

# 显示全部打开的端口
nmap ip
</code></pre><p>根据显示close/open确定端口是否打开。</p>
<h3 id="3-nc方式"><a href="#3-nc方式" class="headerlink" title="3 nc方式"></a>3 nc方式</h3><pre><code>nc -v ip port
</code></pre><p>端口未打开返回状态为非0。</p>
]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> Linux </tag>
            
            <tag> 端口扫描 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的配置及使用]]></title>
      <url>https://whark.cn/2017/05/22/use-of-git/</url>
      <content type="html"><![CDATA[<h3 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h3><h5 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h5><pre><code>sudo apt-get install git
</code></pre><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p>Git<a href="https://git-for-windows.github.io/" target="_blank" rel="external">官网</a>下载安装</p>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><h4 id="设置git用户名-邮箱"><a href="#设置git用户名-邮箱" class="headerlink" title="设置git用户名/邮箱"></a>设置git用户名/邮箱</h4><pre><code>git config --global user.name [username]
git config --global user.email [email]
</code></pre><p>如果Git源每次操作需要你输入用户名/密码验证，就需要做如下设置：</p>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><pre><code>echo &quot;[credential]&quot; &gt;&gt; .git/config
echo &quot;    helper = store&quot; &gt;&gt; .git/config
</code></pre><h5 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h5><p>打开.git/config，在最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[credential]</div><div class="line">	helper = store</div></pre></td></tr></table></figure>
<p>这样就可以保存用户名密码，不用每次都输入了！</p>
<h3 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h3><h5 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h5><pre><code>git clone --depth=1 http://jdjks.hfnu.edu.cn/git/AnhuiIOT.git
</code></pre><h5 id="暂存区、工作区管理"><a href="#暂存区、工作区管理" class="headerlink" title="暂存区、工作区管理"></a>暂存区、工作区管理</h5><pre><code>git add [file]                提交本次修改至暂存区
git commit -m &quot;message&quot;        提交暂存区文件至版本库
git status                    查看git工作区的状态
git log                        查看版本库提交记录: 
</code></pre><p>假设：<br>工作区：a<br>暂存区（index）:b<br>HEAD:C</p>
<p>git diff命令</p>
<pre><code>git diff           比较a跟b
git diff --cached  比较b跟c
git diff HEAD      比较a跟c
</code></pre><p>git reset跟 git checkout</p>
<pre><code>git reset HEAD              c覆盖b
git checkout -- &lt;file&gt;      b覆盖a
git checkout HEAD &lt;file&gt;    c覆盖a,b
</code></pre><p>git rm命令</p>
<pre><code>git rm              删除a跟b
git rm --cached     只删除b
rm file             只删除a
</code></pre><p>放弃本地修改，强制pull： </p>
<p><code>git fetch --all</code></p>
<p><code>git reset --hard origin/master</code></p>
<p>git fetch只是下载远程的库的内容，不做任何的合并。</p>
<p>git reset把HEAD指向刚刚下载的最新的版本。</p>
<h5 id="Git连接远程仓库"><a href="#Git连接远程仓库" class="headerlink" title="Git连接远程仓库"></a>Git连接远程仓库</h5><pre><code>git remote               查看远程库的信息  
git remote -v            显示更详细的信息  
git remote add origin git@git.coding.net:tengj/gitLearn.git  连接远程仓库  
git clone git@git.coding.net:tengj/gitLearn.git            复制一份远程仓库项目到本地  
git remote rm origin     关闭连接远程仓库  
git push origin master   推送分支  
git pull origin master   抓取更新
</code></pre><h5 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h5><pre><code>git branch               查看当前分支
git branch -v           查看每一个分支的最后一次提交
git branch -a           查看本地和远程分支的情况
git branch --merged      查看已经与当前分支合并的分支
git branch --no-merged     查看已经与当前分支未合并的分支
git branch -r            查看远程分支
git branch dev           创建分支 dev
git checkout dev         切换到分支dev
git checkout -b dev      创建并切换分支dev
git merge dev            名称为dev的分支与当前分支合并
git branch -d dev        删除分支dev
git merge --no-ff -m &quot;merge with no-ff&quot; dev            合并分支，禁用Fast forward
git log --graph --pretty=oneline --abbrev-commit    查看分支合并情况
</code></pre><h5 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h5><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git教程–廖雪峰</a></p>
<p><a href="https://juejin.im/user/577f597d5bbb500061e8a761" target="_blank" rel="external">掘金–嘟嘟MD</a></p>
<p><a href="http://www.cnblogs.com/cspku/articles/Git_cmds.html" target="_blank" rel="external">Git常用命令</a></p>
]]></content>
      
        
        <tags>
            
            <tag> skill </tag>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一次牛客网模拟测验的一些问题]]></title>
      <url>https://whark.cn/2017/05/21/nowcoder-first-test/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;首先选择意向职位时，并没有<strong>PHP</strong>，所以报名时就选了<strong>运维</strong>，考试时间为5月19日 <strong>19:00-21:00</strong>，根本没有任何准备，19号上午收到官方的邮件才想起来这件事，邮件中给出了考试时间和考试的入口地址，然而我并没有好好看，匆忙的刷了一下午题，等到晚上的时候，官网上进入考试的入口一直不能进去，怎么刷新都不行，<strong>19:05</strong>才想起来再看一下邮件，开始进入考试，做选择题时，很多常用的知识都不知道，导致做选择题做了将近 <strong>40</strong>分钟，而且正确率还没保障。做编程题时，基础不够扎实，做其中一个题目就用了 <strong>45</strong>分钟，所以余下的两个题目就只剩了 <strong>20</strong>分钟的时间，这二十分钟肯定只够做其中一个题目，然而我读了下第三题的题目，还没思考，就觉得这是最后一个题目，肯定比较难，就放弃它，做另一个题目去了，然后又花了 <strong>10</strong>分钟做，才发现时间太短做不好，这时再绝望的转去做最后一题，时间已不足 <strong>10</strong>分钟，才发现这个有很快捷的解题思路，然而时间不够用了，只少了两分钟的时间，这两分钟不应该错过的，故留踩坑记录，警示自己。</p>
<h4 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h4><ol>
<li>没有做好充分的准备，基础知识不扎实，导致做题速度慢，正确率低</li>
</ol>
<ul>
<li>对信息的关注度不够，导致不能及时进入考试</li>
<li>决策有问题，导致最后的时间没能好好利用，再次错过了答题</li>
</ul>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>推荐大家使用<a href="https://www.nowcoder.com" target="_blank" rel="external">牛客网</a>，偶尔可以刷刷题，巩固一下基础知识，无聊时可以做一下智力题专项训练，预防青年痴呆。</p>
<h4 id="补更结果"><a href="#补更结果" class="headerlink" title="补更结果"></a>补更结果</h4><p>今天结果出来了很意外，先看了下求职竞争力报告，分数挺低的，挺可惜的，后来和同学详聊的时候，他发现我进排行榜了，着实吓了一跳，这下觉得更可惜了。以下附上求职竞争力报告和排行榜。</p>
<p><a href="http://ongjgltez.bkt.clouddn.com/pdf/%E6%B1%82%E8%81%8C%E7%AB%9E%E4%BA%89%E5%8A%9B%E6%8A%A5%E5%91%8A.pdf" target="_blank" rel="external">求职竞争力报告</a></p>
<p><img src="http://ongjgltez.bkt.clouddn.com/image/%E6%8E%92%E8%A1%8C%E6%A6%9C.png" alt="Alt text"></p>
]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
            <tag> 牛客 </tag>
            
            <tag> 程序猿 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的站点]]></title>
      <url>https://whark.cn/2017/03/25/my-website/</url>
      <content type="html"><![CDATA[<h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><ul>
<li><a href="https://wlwshow.cn" target="_blank" rel="external">wlwshow.cn</a></li>
<li><a href="http://dphong.top" target="_blank" rel="external">dphong.top</a></li>
<li><a href="http://iotshow.top" target="_blank" rel="external">iotshow.top</a></li>
<li><a href="http://dphong.github.io" target="_blank" rel="external">dphong.github.io</a></li>
</ul>
<h3 id="智能物流系统管理平台"><a href="#智能物流系统管理平台" class="headerlink" title="智能物流系统管理平台"></a>智能物流系统管理平台</h3><ul>
<li><a href="https://iot.wlwshow.cn" target="_blank" rel="external">iot.wlwshow.cn</a></li>
<li><a href="http://iot.iotshow.top" target="_blank" rel="external">iot.iotshow.top</a></li>
</ul>
<h3 id="物联网作品展示平台"><a href="#物联网作品展示平台" class="headerlink" title="物联网作品展示平台"></a>物联网作品展示平台</h3><ul>
<li><a href="https://work.wlwshow.cn" target="_blank" rel="external">work.wlwshow.cn</a></li>
</ul>
<h3 id="Linux-IP上传地址"><a href="#Linux-IP上传地址" class="headerlink" title="Linux IP上传地址"></a>Linux IP上传地址</h3><ul>
<li><a href="http://ip.wlwshow.cn" target="_blank" rel="external">ip.wlwshow.cn</a></li>
</ul>
<h3 id="百度地图API使用示例"><a href="#百度地图API使用示例" class="headerlink" title="百度地图API使用示例"></a>百度地图API使用示例</h3><ul>
<li><a href="http://map.wlwshow.cn" target="_blank" rel="external">map.wlwshow.cn</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> website </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的2016]]></title>
      <url>https://whark.cn/2016/12/31/my-2016/</url>
      <content type="html"><![CDATA[<p>2016年的整体感觉就是学的东西很杂，什么都学了，什么都没深入，上半年还比较有斗志，下半年什么都没学到，就这样浑浑噩噩的过完了。</p>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>上半年虽然参加了很多的比赛，但哪个比赛都没做好。下半年则是什么都没学好，就只是弄了下云服务器，机器人小组培训、附中代课、帮老师帮忙，这一些琐碎的生活占据了我大部分的学习时间。回想这一年也就只有大二下学期期末之前做<a href="http://wlwshow.cn" target="_blank" rel="external">物联网作品展示平台</a>这个网站的时候，真正奋斗过一段时间，现在想起来，那段时间是那样的充实。</p>
<h2 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h2><h3 id="robocup-2D"><a href="#robocup-2D" class="headerlink" title="robocup 2D"></a>robocup 2D</h3><p>这个曾经奋斗了一年的项目，因为它，我结识到一群挚友，和他们共同努力，我的人生开始因此而不同，梦想始于此。</p>
<h3 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h3><p>4月份的时候参加了学校集体报名的CCF计算机资格认证，因为成绩还不错，就被朱强老师叫去参加安徽省的ACM程序设计竞赛，和实验室的战友一起去参加了这次比赛，因为那段时间比较忙，并没有怎么去准备，ACM的基本框架都不怎么会写，该特别注意的地方也不知道，因为不知道 “printf” 和 “cout” 在处理数据时的速度差别，导致一个已经做出来的题目因为 “timeout” 而无法通过测试，对此特别遗憾。</p>
<h3 id="物联网创新创业大赛"><a href="#物联网创新创业大赛" class="headerlink" title="物联网创新创业大赛"></a>物联网创新创业大赛</h3><p>当时和两个室友一起加入了这个小组，感觉冯玉婷老师付出的比我们的都多，然而我们一学期都没能坚持下来，然后整个项目就荒废掉了，暑假的比赛也没报名参加，无果而终。</p>
<h3 id="单片机与嵌入式系统应用技能竞赛"><a href="#单片机与嵌入式系统应用技能竞赛" class="headerlink" title="单片机与嵌入式系统应用技能竞赛"></a>单片机与嵌入式系统应用技能竞赛</h3><p>今年这个竞赛新增了一个ARM版，因为我以前学过STM32，所以就和学长一起报名参加了，但也没有好好准备，所以比赛的结果并不好。</p>
<h2 id="关于读书"><a href="#关于读书" class="headerlink" title="关于读书"></a>关于读书</h2><p>这一年就只读了这几本书，还有些买来了就没看过的，没有完成当初定下的读书目标，今后一定要多读点书（人丑就要多读书）。</p>
<blockquote>
<p>《拆掉思维里的墙》<br>《从0到1》<br>《创新者的窘境》</p>
</blockquote>
<h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>有一群非常要好的朋友，一起奋斗，是件多么快乐的事啊。<br>还记得当时程慧生日的时候，叫了实验室的人一起吃饭，我跟强强坐在一起，当时他们是喝的那么尽兴，我还不理解的问了强强，怎么喝这么猛，强强回了一句，下次再一起聚就不知道是什么时候的事了，这一次自然要喝到尽兴为止。他们都去工作之后，我体会到了那种感情，却不能退到那一天，陪他们酩酊大醉，下次再聚，我不会再错过了。<br>陈兴，最要好的朋友之一，非常敬佩他的学习精神与生活态度，能够勇敢的去做自己想做的事情，并且能坚定自己的想法。<br>当然还有强强、赵坤鹏、程慧，你们这群学长对我的鼓励与帮助，永远铭记于心。<br>送给自己的一段话：</p>
<blockquote>
<p>高潮时享受成就，低潮时享受人生，有心思时干有意义的活，没心情时做有意思的事。</p>
</blockquote>
<h2 id="关于理想"><a href="#关于理想" class="headerlink" title="关于理想"></a>关于理想</h2><p>大一时候的理想是要创业，结果一两年下来，离这个理想越来越远，已经变成梦想飞走了，对人生思考的还远远不够，反思太少了，现在的理想就是好好学习，多读书，多反思。</p>
<blockquote>
<p>平庸，就是失去追求卓越信念的那个瞬间。</p>
</blockquote>
<h2 id="关于爱情"><a href="#关于爱情" class="headerlink" title="关于爱情"></a>关于爱情</h2><p>我们之间，没有开始，就也不会有结束，送你这段话。</p>
<blockquote>
<p>愿你，此后做的每一个选择都是为了自己；<br>愿你，每天那么忙，做的都是自己喜欢的；<br>愿你，将来的婚姻，真的是因为爱情；<br>愿你，少一些何必当初，多一些暗自庆幸；<br>愿你，以后的所有泪水都是喜极而泣。</p>
</blockquote>
<p align="right">落笔于2016.12.31 21:30。</p>]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运用 批处理文件+Excel 实现批量改名]]></title>
      <url>https://whark.cn/2016/09/10/First-blog/</url>
      <content type="html"><![CDATA[<h2 id="1-进入CMD命令行模式"><a href="#1-进入CMD命令行模式" class="headerlink" title="1.进入CMD命令行模式"></a>1.进入CMD命令行模式</h2><p>按 win+r ，在弹出的运行框中输入cmd，回车。</p>
<p><img src="http://odar1igu6.bkt.clouddn.com/1.png" alt="Alt text"></p>
<h2 id="2-将现在的文件名导入Excel"><a href="#2-将现在的文件名导入Excel" class="headerlink" title="2.将现在的文件名导入Excel"></a>2.将现在的文件名导入Excel</h2><p>在命令行中使用cd命令进入相应的文件夹，再在命令行中输入 dir /w &gt; rename.xls </p>
<p><img src="http://odar1igu6.bkt.clouddn.com/2.png" alt="Alt text"><br>文件夹中就会生成一个 rename.xls 的Excel文件。</p>
<h2 id="3-生成重命名命令"><a href="#3-生成重命名命令" class="headerlink" title="3.生成重命名命令"></a>3.生成重命名命令</h2><p>使用公式 =SUBSTITUTE(A1,”old_string”,”new_string”),回车<br><img src="http://odar1igu6.bkt.clouddn.com/3.png" alt="Alt text"></p>
<p>再输入 =CONCATENATE(“ren “,A1,” “,B1)</p>
<p><img src="http://odar1igu6.bkt.clouddn.com/4.png" alt="Alt text"></p>
<h2 id="4-执行批处理命令"><a href="#4-执行批处理命令" class="headerlink" title="4.执行批处理命令"></a>4.执行批处理命令</h2><p>将上面批量生成的命令复制下来，在之前的cmd命令行中粘贴，或者在目标文件夹下新建 rename.bat ,右键 编辑，粘贴保存，双击即可运行。<br><img src="http://odar1igu6.bkt.clouddn.com/5.png" alt="Alt text"></p>
]]></content>
      
        
        <tags>
            
            <tag> 批处理 </tag>
            
            <tag> Excel </tag>
            
            <tag> skill </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
